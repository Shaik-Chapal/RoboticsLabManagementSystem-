<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RoboticsLabManagementSystem</name>
    </assembly>
    <members>
        <member name="M:RoboticsLabManagementSystem.Controllers.AuthController.VerifyCaptcha(RoboticsLabManagementSystem.RequestHandler.AuthRequestHandler.AddTokenRequestHandler)">
            <summary>
            Verifies the captcha token for a given request.
            </summary>
            <param name="tokenRequest">The request containing the captcha token.</param>
            <returns>
            If the captcha token is valid, returns a success response with a message.
            If the captcha token is invalid, returns a bad request response with an error message.
            </returns>
            <remarks>
            Sample request:
            
                {
                  "Token": "JEJviamMFHMTQXXct2tjMvnUQ0z3TdIexUxiAvyyLzbEzOs0J-QWoSvEBM6naocMiv"
                }
            
            Sample response for a successful verification:
            
                {
                  "status": "Success",
                  "message": "Captcha verification successful"
                }
            
            Sample response for a failed verification:
            
                {
                  "status": "error",
                  "message": "Captcha verification failed"
                }
            </remarks>
        </member>
        <member name="M:RoboticsLabManagementSystem.Controllers.AuthController.Login(RoboticsLabManagementSystem.RequestHandler.AuthRequestHandler.AddLoginRequestHandler)">
            <remarks>
            Sample request:
            
                {
                  "email": "xyz@gmail.com",
                  "password": "123456"
                }
            
            Sample response:
            
                {
                  "status": "Success",
                  "message": "Login successful",
                  "data": {
                    "user": {
                      "id": "17fa016f-ae8b-4044-80e3-abd54djie392f",
                      "username": "test",
                      "email": "test@gmail.com",
                      "claims": [
                        {
                          "value": "Administrator"
                        }
                      ]
                    },
                    "token": "eyJhbGciOiJIsInR5cCI6IkpXVCJ9.eyJBZG1pbkFjY2VzcyI6IkFkbWluaXN0cmF0b3IiLCJuYmYiOjE3MDQ4MjUxNjcsImV4cCI6MTcwNTQyOTk2NywiaWF0IjoxNzA0ODI1MTY3LCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMyMiIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjQ0MzIyIn0.rRIES69wQVQUCnorcHfh6b_EneyAPn1aSjSwUhxZfF0"
                  }
                }
            </remarks>
        </member>
        <member name="M:RoboticsLabManagementSystem.Controllers.AuthController.Logout">
            <summary>
            Logs out the authenticated user.
            </summary>
            <returns>
            If the user is successfully logged out, returns a success response with a message.
            </returns>
            <remarks>
            This endpoint requires authentication.
            </remarks>
            <remarks>
            Sample response for a successful logout:
            
                {
                  "status": "Success",
                  "message": "Logged out successfully"
                }
            </remarks>
        </member>
        <member name="M:RoboticsLabManagementSystem.Controllers.AuthController.ForgotPassword(RoboticsLabManagementSystem.RequestHandler.AuthRequestHandler.ForgotPasswordRequestHandler)">
            <summary>
            Initiates the process for resetting a user's forgotten password.
            </summary>
            <param name="request">The request containing the user's email for password reset.</param>
            <returns>
            If the request is valid and the user exists with a confirmed email, initiates the password reset process
            and returns a success response with a reset token.
            If the request is invalid or the user does not exist, returns a success response without initiating the process.
            </returns>
            <remarks>
            Sample request:
            
                {
                  "Email": "test@example.com"
                }
            
            Sample response for a successful initiation:
            
                {
                  "ResetToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                }
            
            </remarks>
        </member>
        <member name="M:RoboticsLabManagementSystem.Controllers.AuthController.ResetPassword(RoboticsLabManagementSystem.RequestHandler.AuthRequestHandler.ResetPasswordRequestHandler)">
            <summary>
            Resets the user's password using the provided token.
            </summary>
            <param name="request">The request containing the necessary information for password reset.</param>
            <returns>
            If the request is valid and the password is successfully reset, returns a success response.
            If the request is invalid or the password reset fails, returns an appropriate error response.
            </returns>
            <remarks>
            Sample request:
            
                {
                  "Email": "test@example.com",
                  "Token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                  "NewPassword": "@#12345",
                  "ConfirmPassword": "@#12345"
                }
            
            Sample response for a successful password reset:
            
                {
                  "status": "Success",
                  "message": "Password reset successful"
                }
            
            Sample response for a failed password reset:
            
                {
                  "status": "error",
                  "message": "Password reset failed",
                  "errors": ["Error 1", "Error 2"]
                }
            </remarks>
        </member>
       
    </members>
</doc>
