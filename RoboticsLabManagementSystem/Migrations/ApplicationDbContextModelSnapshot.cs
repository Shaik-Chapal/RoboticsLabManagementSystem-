// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoboticsLabManagementSystem.Infrastructure;

#nullable disable

namespace RoboticsLabManagementSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            BlogId = new Guid("70d8341e-e62c-4225-a4f6-35beb1e0f7ce"),
                            Author = "Alice Johnson",
                            Content = "Content of the blog post 1",
                            PublicationDate = new DateTime(2024, 5, 19, 22, 50, 6, 958, DateTimeKind.Local).AddTicks(320),
                            ThumbnailImage = "https://images.unsplash.com/photo-1667489022797-ab608913feeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60",
                            Title = "Sample Blog Title 1"
                        },
                        new
                        {
                            BlogId = new Guid("33b8cca4-0e19-4d06-a195-1e10fbafb07a"),
                            Author = "Bob Williams",
                            Content = "Content of the blog post 2",
                            PublicationDate = new DateTime(2024, 5, 19, 22, 50, 6, 958, DateTimeKind.Local).AddTicks(327),
                            ThumbnailImage = "https://images.unsplash.com/photo-1667489022797-ab608913feeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60",
                            Title = "Sample Blog Title 2"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Company.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c87e26a0-b4b4-4916-9379-ffc12a7b4d27"),
                            Address = "Address of CSE branch",
                            CompanyId = new Guid("f00918a5-3a59-4e3c-9a47-cf36930e7add"),
                            Name = "CSE",
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("537b410e-82e8-41e7-8753-75f391a204b9"),
                            Address = "Address of EEE branch",
                            CompanyId = new Guid("f00918a5-3a59-4e3c-9a47-cf36930e7add"),
                            Name = "EEE",
                            Phone = "9876543210"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Company.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f00918a5-3a59-4e3c-9a47-cf36930e7add"),
                            Address = "Pentti Kaiteran katu 1, 90570 Oulu, Finland",
                            CloseTime = new TimeSpan(0, 20, 0, 0, 0),
                            Email = "info@OuluUniversity.com",
                            Name = "Oulu University of Applied Sciences",
                            OpenTime = new TimeSpan(0, 10, 0, 0, 0),
                            Phone = "+358 29 4480000",
                            Website = "https://www.oulu.fi/en"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("EquipmentID");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.EquipmentLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Approval")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EquipmentLogs");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.EquipmentLogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentLogId");

                    b.ToTable("EquipmentLogItems");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.FeaturedContent", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullContentLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.ToTable("FeaturedContents");

                    b.HasData(
                        new
                        {
                            ContentId = new Guid("9806913d-b3c7-4c69-89b6-8d5527788205"),
                            Author = "Eva Brown",
                            ContentType = "Blog",
                            FullContentLink = "http://example.com/featured1",
                            PublicationDate = new DateTime(2024, 5, 19, 22, 50, 6, 958, DateTimeKind.Local).AddTicks(466),
                            Summary = "Summary of the featured content 1",
                            ThumbnailImage = "https://images.unsplash.com/photo-1667489022797-ab608913feeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60",
                            Title = "Sample Featured Content Title 1"
                        },
                        new
                        {
                            ContentId = new Guid("9493f21f-4555-4558-9f2b-319cc4085862"),
                            Author = "David Miller",
                            ContentType = "Research",
                            FullContentLink = "http://example.com/featured2",
                            PublicationDate = new DateTime(2024, 5, 19, 22, 50, 6, 958, DateTimeKind.Local).AddTicks(477),
                            Summary = "Summary of the featured content 2",
                            ThumbnailImage = "https://images.unsplash.com/photo-1667489022797-ab608913feeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60",
                            Title = "Sample Featured Content Title 2"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9781f8c2-a0ca-4b93-8406-4d5c448dbcf8"),
                            Name = "Power Supplies"
                        },
                        new
                        {
                            Id = new Guid("70ff2202-1675-41ac-8204-35354dd3cd01"),
                            Name = "Multimeters"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Holiday", b =>
                {
                    b.Property<Guid>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HolidayId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            HolidayId = new Guid("6e1c5485-a024-46e0-8315-ac4889a6f4f4"),
                            Date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Year's Day"
                        },
                        new
                        {
                            HolidayId = new Guid("f8427397-da89-41e4-838b-74818ce20fcf"),
                            Date = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Christmas"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Research", b =>
                {
                    b.Property<Guid>("ResearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTextLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResearchId");

                    b.ToTable("Researches");

                    b.HasData(
                        new
                        {
                            ResearchId = new Guid("cc7dda1e-e51c-4fd1-a881-759e1d4abfc9"),
                            Authors = "John Doe",
                            FullTextLink = "http://example.com/research1",
                            PublicationDate = new DateTime(2024, 5, 19, 22, 50, 6, 958, DateTimeKind.Local).AddTicks(231),
                            Summary = "Summary of the research article 1",
                            ThumbnailImage = "https://images.unsplash.com/photo-1667489022797-ab608913feeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60",
                            Title = "Sample Research Title 1"
                        },
                        new
                        {
                            ResearchId = new Guid("c7577f4a-d653-4e62-8806-842635781a79"),
                            Authors = "Jane Smith",
                            FullTextLink = "http://example.com/research2",
                            PublicationDate = new DateTime(2024, 5, 19, 22, 50, 6, 958, DateTimeKind.Local).AddTicks(245),
                            Summary = "Summary of the research article 2",
                            ThumbnailImage = "https://images.unsplash.com/photo-1667489022797-ab608913feeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60",
                            Title = "Sample Research Title 2"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.ResearchResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResearchResults");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            SupplierId = new Guid("9b94c748-794d-4d37-9021-2800b32334f5"),
                            Address = "123 Main Street, City, Country",
                            ContactPerson = "John Doe",
                            CreatedAt = new DateTime(2024, 5, 19, 16, 50, 6, 957, DateTimeKind.Utc).AddTicks(9333),
                            Email = "john.doe@example.com",
                            Name = "Supplier A",
                            Phone = "+1234567890"
                        },
                        new
                        {
                            SupplierId = new Guid("ea3872b1-f8e2-4e0a-86fc-bdae579dd967"),
                            Address = "456 Elm Street, City, Country",
                            ContactPerson = "Jane Smith",
                            CreatedAt = new DateTime(2024, 5, 19, 16, 50, 6, 957, DateTimeKind.Utc).AddTicks(9353),
                            Email = "jane.smith@example.com",
                            Name = "Supplier B",
                            Phone = "+0987654321"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Threshold", b =>
                {
                    b.Property<Guid>("ThresholdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("int");

                    b.Property<string>("NotificationMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThresholdId");

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JoinDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17fa016f-ae8b-4044-80e3-abd54dfe392f"),
                            CurrentAddress = "Admin Address",
                            Department = "Admin Department",
                            Designation = "Admin",
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            IdNumber = "Admin ID",
                            JoinDate = "5/19/2024 4:50:06 PM",
                            LastName = "Admin",
                            Password = "admin123",
                            PhoneNumber = "1234567890",
                            Session = "Admin Session"
                        },
                        new
                        {
                            Id = new Guid("8fd9fc20-5382-4f44-88fd-c78993a1d8e5"),
                            CurrentAddress = "Manager Address",
                            Department = "Manager Department",
                            Designation = "Manager",
                            Email = "manager@gmail.com",
                            FirstName = "Manager",
                            IdNumber = "Manager ID",
                            JoinDate = "5/19/2024 4:50:06 PM",
                            LastName = "Manager",
                            Password = "manager123",
                            PhoneNumber = "1234567890",
                            Session = "Manager Session"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("17fa016f-ae8b-4044-80e3-abd54dfe392f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ff3ffd9-e4f1-4d35-9763-aef34a6b2d5c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEp/gsay/o+bAjY7j5sk/99O4d43dOPF+6vS40VF0l47kzGKU81OLv3izAxPhsfsow==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BFCC7B453A8B4B6C8A4C93EE28A3B4A8",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("8fd9fc20-5382-4f44-88fd-c78993a1d8e5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f90a079-3ad9-4334-95e6-5ccb48f2bd5f",
                            Email = "Teacher@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "Teacher@GMAIL.COM",
                            NormalizedUserName = "Teacher",
                            PasswordHash = "AQAAAAIAAYagAAAAEH9vAiLNYOfr1TbvmI1hDpLIsRmFIRprr97oUMSsN7O+tI3mF004xs0XcAst3tmB3w==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FC37C84E276C4D978DF9054129D0CB23",
                            TwoFactorEnabled = false,
                            UserName = "Teacher"
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "AdminAccess",
                            ClaimValue = "Administrator",
                            UserId = new Guid("17fa016f-ae8b-4044-80e3-abd54dfe392f")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "TeacherAccess",
                            ClaimValue = "Teacher",
                            UserId = new Guid("8fd9fc20-5382-4f44-88fd-c78993a1d8e5")
                        });
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Company.Branch", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Domain.Entities.Company.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.EquipmentLogItem", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Domain.Entities.EquipmentLog", "EquipmentLog")
                        .WithMany("Items")
                        .HasForeignKey("EquipmentLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentLog");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Domain.Entities.Equipment", "Equipment")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.ResearchResult", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Domain.Entities.User", "User")
                        .WithMany("ResearchResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationRoleClaim", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUserClaim", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUserLogin", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUserRole", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUserToken", b =>
                {
                    b.HasOne("RoboticsLabManagementSystem.Infrastructure.Features.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Company.Company", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.EquipmentLog", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RoboticsLabManagementSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("ResearchResults");
                });
#pragma warning restore 612, 618
        }
    }
}
